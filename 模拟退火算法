clear;
clc;
% a:温度衰减函数的参数
% t0:初始温度 
% tf:终止温度 
% Markov_length:Markov链长度
a = 0.99; t0 = 97; tf = 3;
Markov_length = 10000; 
coodinates = [];
amount = size(coodinates,1);
dist_matrix = 

% 首先产生初始解
sol_new =1:amount; 
sol_current = sol_new; sol_best = sol_new;
%
E_current = inf; E_best = inf;
p = 1;

t = t0;
while t > tf
    for r = 1:Markov_length
        if (rand < 0.5)
            ind1 = 0; ind2 = 0;
            while ( ind1 == ind2)
                ind1 = ceil(rand.*amount);
                ind2 = ceil(rand.*amount);
            end
            tmp1 = sol_new(ind1);
            sol_new(ind1) = sol_new(ind2);
            sol_new(ind1) = tmp1;
        else
            ind1 = 0; ind2 = 0; ind3 = 0;
            while (ind1 == ind2) || (ind1 == ind3) || (ind2 == ind3) || (abs(ind1-ind2) == 1)
                ind1 = ceil(rand.*amount);
                ind2 = ceil(rand.*amount);
                ind3 = ceil(rand.*amount);
            end
            tmp1 = ind1; tmp2 = ind2; tmp3 = ind3;
            if (ind1 < ind2) && (ind2 < ind3)
                
            elseif (ind1 < ind3) && (ind3 < ind2)
                ind2 = tmp3; ind3 = tmp2;
            elseif (ind2 < ind1) && (ind1 < ind3)
                ind1 = tmp2; ind2 = tmp1;
            elseif (ind2 < ind3) && (ind3 < ind1)
                ind1 = tmp2; ind2 = tmp3; ind3 =tmp1;
            elseif (ind3 < ind1) && (ind1 < ind2)
                ind1 = tmp3; ind2 = tmp1; ind3 =tmp2;
            elseif (ind3 < ind2) && (ind2 < ind1)
                ind1 = tmp3; ind2 = tmp2; ind3 =tmp1;
            end
            
            tmplist1 = sol_new((ind1 + 1):(ind2-1));
            sol_new((ind1+1):(ind1 + ind3 - ind2 + 1)) = sol_new((ind2):(ind3));
            sol_new((ind1 + ind3 -ind2 +2):ind3) = tmplist1;
        end
        E_new = 0;
        for i = 1:(amount-1)
            E_new = E_new + dist_matrix(sol_new(i),sol_new(i+1));
        end
        E_new = E_new + dist_matrix(sol_new(amount),sol_new(i+1));
        if E_new < E_current
            E_current = E_new ;
            sol_current = sol_new;
            if E_new < E_best
                E_best = E_new ;
                sol_best = sol_new;
            end
        else
            if rand < exp(-(E_new - E_current)./t)
                E_current = E_new ;
                sol_current = sol_new;
            else
                sol_new = sol_current;
            end
        end
    end
    t = t .* a;
end
               
